// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SatelittiBpms.Data;

namespace SatelittiBpms.Data.Migrations
{
    [DbContext(typeof(BpmsContext))]
    [Migration("20220222165237_Adjust_SignerCpfNullnable")]
    partial class Adjust_SignerCpfNullnable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityFieldInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessVersionId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProcessVersionId");

                    b.ToTable("ActivityFields");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComponentInternalId")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessVersionId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityNotificationInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CustomEmail")
                        .HasColumnType("longtext");

                    b.Property<int>("DestinataryType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TitleMessage")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ActivityNotifications");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ExecutorType")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("ActivityUsers");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserOptionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityUserId");

                    b.ToTable("ActivityUsersOptions");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComponentInternalId")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("ProcessVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessVersionId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldValueFileInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FieldValueId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<int>("UploadedFieldValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldValueId");

                    b.HasIndex("UploadedFieldValueId");

                    b.ToTable("FieldValueFiles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldValueInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("longtext");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FlowId");

                    b.HasIndex("TaskId");

                    b.ToTable("FieldValues");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FlowInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProcessVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessVersionId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FlowPathInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("SourceTaskId")
                        .HasColumnType("int");

                    b.Property<int>("TargetTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("SourceTaskId");

                    b.HasIndex("TargetTaskId");

                    b.ToTable("FlowPaths");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CurrentVersion")
                        .HasColumnType("int");

                    b.Property<int?>("TaskSequance")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessVersionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionFlow")
                        .HasColumnType("longtext");

                    b.Property<string>("DiagramContent")
                        .HasColumnType("longtext");

                    b.Property<string>("FormContent")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowContent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessVersions");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessVersionRoleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProcessVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessVersionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ProcessRoles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.RoleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.RoleUserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityAuthorizerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CpfFieldId")
                        .HasColumnType("int");

                    b.Property<int>("EmailFieldId")
                        .HasColumnType("int");

                    b.Property<int>("NameFieldId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationLocation")
                        .HasColumnType("int");

                    b.Property<int>("SignerIntegrationActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpfFieldId");

                    b.HasIndex("EmailFieldId");

                    b.HasIndex("NameFieldId");

                    b.HasIndex("SignerIntegrationActivityId");

                    b.ToTable("SignerIntegrationActivityAuthorizers");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityFileInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FileFieldId")
                        .HasColumnType("int");

                    b.Property<int>("SignerIntegrationActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileFieldId");

                    b.HasIndex("SignerIntegrationActivityId");

                    b.ToTable("SignerIntegrationActivityFiles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("AuthorizeAccessAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AuthorizeEnablePriorAuthorizationOfTheDocument")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EnvelopeTitle")
                        .HasColumnType("longtext");

                    b.Property<int>("ExpirationDateFieldId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("Segment")
                        .HasColumnType("int");

                    b.Property<int>("SendReminders")
                        .HasColumnType("int");

                    b.Property<bool>("SignatoryAccessAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.HasIndex("ExpirationDateFieldId");

                    b.ToTable("SignerIntegrationActivities");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivitySignatoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CpfFieldId")
                        .HasColumnType("int");

                    b.Property<int>("EmailFieldId")
                        .HasColumnType("int");

                    b.Property<int>("NameFieldId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationLocation")
                        .HasColumnType("int");

                    b.Property<int>("SignatureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SignerIntegrationActivityId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpfFieldId");

                    b.HasIndex("EmailFieldId");

                    b.HasIndex("NameFieldId");

                    b.HasIndex("SignerIntegrationActivityId");

                    b.ToTable("SignerIntegrationActivitySignatories");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TaskHistoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TaskInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FlowId");

                    b.HasIndex("OptionId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TemplateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionFlow")
                        .HasColumnType("longtext");

                    b.Property<string>("DiagramContent")
                        .HasColumnType("longtext");

                    b.Property<string>("FormContent")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TenantInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessKey")
                        .HasColumnType("longtext");

                    b.Property<int?>("DefaultRoleId")
                        .HasColumnType("int");

                    b.Property<string>("SignerAccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SubDomain")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<float?>("Timezone")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.VersionNormalizationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Normalization")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VersionNormalization");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityFieldInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityInfo", "Activity")
                        .WithMany("ActivityFields")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "Field")
                        .WithMany("ActivityFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.ProcessVersionInfo", "ProcessVersion")
                        .WithMany("ActivityFields")
                        .HasForeignKey("ProcessVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Field");

                    b.Navigation("ProcessVersion");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ProcessVersionInfo", "ProcessVersion")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessVersion");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityNotificationInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityInfo", "Activity")
                        .WithOne("ActivityNotification")
                        .HasForeignKey("SatelittiBpms.Models.Infos.ActivityNotificationInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.RoleInfo", "Role")
                        .WithMany("ActivityNotifications")
                        .HasForeignKey("RoleId");

                    b.Navigation("Activity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityInfo", "Activity")
                        .WithOne("ActivityUser")
                        .HasForeignKey("SatelittiBpms.Models.Infos.ActivityUserInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.UserInfo", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SatelittiBpms.Models.Infos.RoleInfo", "Role")
                        .WithMany("ActivityUsers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Activity");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserOptionInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityUserInfo", "ActivityUser")
                        .WithMany("ActivityUsersOptions")
                        .HasForeignKey("ActivityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityUser");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ProcessVersionInfo", "ProcessVersion")
                        .WithMany("Fields")
                        .HasForeignKey("ProcessVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessVersion");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldValueFileInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FieldValueInfo", "FieldValue")
                        .WithMany("FieldValueFiles")
                        .HasForeignKey("FieldValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FieldValueInfo", "UploadedFieldValue")
                        .WithMany("UploadedFieldValueFiles")
                        .HasForeignKey("UploadedFieldValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldValue");

                    b.Navigation("UploadedFieldValue");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldValueInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FlowInfo", "Flow")
                        .WithMany("FieldValues")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.TaskInfo", "Task")
                        .WithMany("FieldsValues")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Flow");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FlowInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ProcessVersionInfo", "ProcessVersion")
                        .WithMany("Flows")
                        .HasForeignKey("ProcessVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.UserInfo", "Requester")
                        .WithMany("RequesterFlows")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessVersion");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FlowPathInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FlowInfo", "Flow")
                        .WithMany("FlowPaths")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.TaskInfo", "SourceTask")
                        .WithMany("TargetTasks")
                        .HasForeignKey("SourceTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.TaskInfo", "TargetTask")
                        .WithMany("SourceTasks")
                        .HasForeignKey("TargetTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("SourceTask");

                    b.Navigation("TargetTask");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessVersionInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ProcessInfo", "Process")
                        .WithMany("ProcessVersions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessVersionRoleInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ProcessVersionInfo", "ProcessVersion")
                        .WithMany("ProcessVersionRoles")
                        .HasForeignKey("ProcessVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.RoleInfo", "Role")
                        .WithMany("ProcessUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessVersion");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.RoleUserInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.RoleInfo", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.UserInfo", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityAuthorizerInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "CpfField")
                        .WithMany("SignerIntegrationActivityAuthorizerCpf")
                        .HasForeignKey("CpfFieldId");

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "EmailField")
                        .WithMany("SignerIntegrationActivityAuthorizerEmail")
                        .HasForeignKey("EmailFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "NameField")
                        .WithMany("SignerIntegrationActivityAuthorizerName")
                        .HasForeignKey("NameFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", "SignerIntegrationActivity")
                        .WithMany("Authorizers")
                        .HasForeignKey("SignerIntegrationActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CpfField");

                    b.Navigation("EmailField");

                    b.Navigation("NameField");

                    b.Navigation("SignerIntegrationActivity");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityFileInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "FileField")
                        .WithMany("SignerIntegrationActivityFile")
                        .HasForeignKey("FileFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", "SignerIntegrationActivity")
                        .WithMany("Files")
                        .HasForeignKey("SignerIntegrationActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileField");

                    b.Navigation("SignerIntegrationActivity");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityInfo", "Activity")
                        .WithOne("SignerIntegrationActivity")
                        .HasForeignKey("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "ExpirationDateField")
                        .WithMany("SignerIntegrationActivityExpirationDate")
                        .HasForeignKey("ExpirationDateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ExpirationDateField");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivitySignatoryInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "CpfField")
                        .WithMany("SignerIntegrationActivitySignatoryCpf")
                        .HasForeignKey("CpfFieldId");

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "EmailField")
                        .WithMany("SignerIntegrationActivitySignatoryEmail")
                        .HasForeignKey("EmailFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.FieldInfo", "NameField")
                        .WithMany("SignerIntegrationActivitySignatoryName")
                        .HasForeignKey("NameFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", "SignerIntegrationActivity")
                        .WithMany("Signatories")
                        .HasForeignKey("SignerIntegrationActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CpfField");

                    b.Navigation("EmailField");

                    b.Navigation("NameField");

                    b.Navigation("SignerIntegrationActivity");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TaskHistoryInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.UserInfo", "Executor")
                        .WithMany("ExecutorTaskHistories")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.TaskInfo", "Task")
                        .WithMany("TasksHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TaskInfo", b =>
                {
                    b.HasOne("SatelittiBpms.Models.Infos.ActivityInfo", "Activity")
                        .WithMany("Tasks")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.UserInfo", "Executor")
                        .WithMany("ExecutorTasks")
                        .HasForeignKey("ExecutorId");

                    b.HasOne("SatelittiBpms.Models.Infos.FlowInfo", "Flow")
                        .WithMany("Tasks")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SatelittiBpms.Models.Infos.ActivityUserOptionInfo", "Option")
                        .WithMany("OptionTasks")
                        .HasForeignKey("OptionId");

                    b.Navigation("Activity");

                    b.Navigation("Executor");

                    b.Navigation("Flow");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityInfo", b =>
                {
                    b.Navigation("ActivityFields");

                    b.Navigation("ActivityNotification");

                    b.Navigation("ActivityUser");

                    b.Navigation("SignerIntegrationActivity");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserInfo", b =>
                {
                    b.Navigation("ActivityUsersOptions");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ActivityUserOptionInfo", b =>
                {
                    b.Navigation("OptionTasks");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldInfo", b =>
                {
                    b.Navigation("ActivityFields");

                    b.Navigation("FieldValues");

                    b.Navigation("SignerIntegrationActivityAuthorizerCpf");

                    b.Navigation("SignerIntegrationActivityAuthorizerEmail");

                    b.Navigation("SignerIntegrationActivityAuthorizerName");

                    b.Navigation("SignerIntegrationActivityExpirationDate");

                    b.Navigation("SignerIntegrationActivityFile");

                    b.Navigation("SignerIntegrationActivitySignatoryCpf");

                    b.Navigation("SignerIntegrationActivitySignatoryEmail");

                    b.Navigation("SignerIntegrationActivitySignatoryName");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FieldValueInfo", b =>
                {
                    b.Navigation("FieldValueFiles");

                    b.Navigation("UploadedFieldValueFiles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.FlowInfo", b =>
                {
                    b.Navigation("FieldValues");

                    b.Navigation("FlowPaths");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessInfo", b =>
                {
                    b.Navigation("ProcessVersions");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.ProcessVersionInfo", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ActivityFields");

                    b.Navigation("Fields");

                    b.Navigation("Flows");

                    b.Navigation("ProcessVersionRoles");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.RoleInfo", b =>
                {
                    b.Navigation("ActivityNotifications");

                    b.Navigation("ActivityUsers");

                    b.Navigation("ProcessUsers");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.SignerIntegrationActivityInfo", b =>
                {
                    b.Navigation("Authorizers");

                    b.Navigation("Files");

                    b.Navigation("Signatories");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.TaskInfo", b =>
                {
                    b.Navigation("FieldsValues");

                    b.Navigation("SourceTasks");

                    b.Navigation("TargetTasks");

                    b.Navigation("TasksHistories");
                });

            modelBuilder.Entity("SatelittiBpms.Models.Infos.UserInfo", b =>
                {
                    b.Navigation("ExecutorTaskHistories");

                    b.Navigation("ExecutorTasks");

                    b.Navigation("RequesterFlows");

                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
